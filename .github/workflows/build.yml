# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      cache_key:
        description: "Cache key"
        required: true
        type: string
      image_name:
        description: "Repository short name"
        required: true
        type: string
      in_memory:
        description: "Use in-memory docker"
        required: false
        type: boolean
        default: false
      in_memory_docker_size:
        description: "Use in-memory docker"
        required: false
        type: number
        default: 2
      in_memory_workdir_size:
        description: "Use in-memory docker"
        required: false
        type: number
        default: 1

      dockerfile:
        description: "Dockerfile path"
        required: false
        type: string
        default: "./docker/dockerfile.production"
      context:
        description: "Build context path"
        required: false
        type: string
        default: "."
      platforms:
        description: "Target platforms"
        required: false
        type: string
        default: ""
      image_tag:
        description: "Override image tag"
        required: false
        type: string
      trigger_infra:
        description: "Trigger CD"
        required: false
        type: boolean
        default: true
      update_qemu:
        required: false
        type: boolean
        default: false
      build-args:
        required: false
        type: string
        default: ""
    secrets:
      INFRA_TOKEN:
        required: true
      IMG_REGISTRY:
        required: true
      IMG_REGION:
        required: true
      CACHE_BUCKET:
        required: true
      SLACK_WEBHOOK_URL:
        required: false
    outputs:
      image_name:
        description: "The first output string"
        value: ${{ jobs.build.outputs.image_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, heavy]

    outputs:
      image_name: ${{ inputs.image_name }}:${{ steps.ref_name.outputs.REF_NAME }}_${{ github.sha }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      #  moby/buildkit:local
      - name: copy buildkit
        if: ${{ inputs.in_memory }}
        run: docker save moby/buildkit:local > /tmp/buildkit.tar

      - name: Run Docker on tmpfs
        uses: JonasAlfredsson/docker-on-tmpfs@v1
        if: ${{ inputs.in_memory }}
        with:
          tmpfs_size: ${{ inputs.in_memory_workdir_size }}
          swap_size: 4
          swap_location: "/mnt/swapfile"

      - name: copy buildkit
        if: ${{ inputs.in_memory }}
        run: docker load < /tmp/buildkit.tar

      - name: mount current folder in RAM
        run: sudo mount -t tmpfs -o size=${{ inputs.in_memory_workdir_size }}g tmpfs $(pwd)
        if: ${{ inputs.in_memory }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ inputs.update_qemu }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - run: |
          REF_NAME=${REF_NAME##*/}
          echo "REF_NAME=$REF_NAME" >> $GITHUB_OUTPUT
        id: ref_name
        shell: bash
        env:
          REF_NAME: ${{ github.ref_name }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: true
          tags: ${{ secrets.IMG_REGISTRY }}/${{ inputs.image_name }}:${{ steps.ref_name.outputs.REF_NAME }}_${{ github.sha }}
          cache-from: type=s3,region=${{ secrets.IMG_REGION }},bucket=${{ secrets.CACHE_BUCKET }},name=${{ inputs.cache_key }}
          cache-to: type=s3,region=${{ secrets.IMG_REGION }},bucket=${{ secrets.CACHE_BUCKET }},name=${{ inputs.cache_key }},mode=max
          platforms: ${{ inputs.platforms == '' && ((github.ref_name == 'main') && 'linux/amd64,linux/arm64' ||  'linux/arm64') || inputs.platforms }}
          build-args: ${{ inputs.build-args }}
          labels: branch=${{ steps.ref_name.outputs.REF_NAME }} sha=${{ github.sha }}

      - name: Build and push other tag
        uses: docker/build-push-action@v3
        if: ${{ inputs.image_tag }}
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: true
          tags: ${{ secrets.IMG_REGISTRY }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          cache-from: type=s3,region=${{ secrets.IMG_REGION }},bucket=${{ secrets.CACHE_BUCKET }},name=${{ inputs.cache_key }}
          cache-to: type=s3,region=${{ secrets.IMG_REGION }},bucket=${{ secrets.CACHE_BUCKET }},name=${{ inputs.cache_key }},mode=max
          platforms: ${{ inputs.platforms }}
          build-args: ${{ inputs.build-args }}
          labels: branch=${{ steps.ref_name.outputs.REF_NAME }} sha=${{ github.sha }}

      - name: Log build to loki
        shell: bash
        run: |
          epoch_time=$(date +%s)
          json_payload=$(cat <<EOF
          {
            "streams": [
              {
                "stream": {
                  "job": "ci",
                  "REPOSITORY": "${{ github.repository }}",
                  "BRANCH": "${{ github.ref_name }}",
                },
                "values": [
                  [
                    "${epoch_time}000000000",
                    "${{ github.repository }}:${{ github.ref_name }}:${{ github.sha }} build completed"
                  ]
                ]
              }
            ]
          }
          EOF
          )
          
          # Send POST request
          curl -X POST -H "Content-Type: application/json" -d "${json_payload}" "http://logging.awms.io:3100/loki/api/v1/push"

      - name: Trigger INFRA
        uses: peter-evans/repository-dispatch@v2
        if: ${{ inputs.trigger_infra }}
        with:
          token: ${{ secrets.INFRA_TOKEN }}
          repository: i40awms/infra
          event-type: post-build
          client-payload: '{"PROJECT_REF": "${{ github.repository }}", "IMAGE_REF": "${{ steps.ref_name.outputs.REF_NAME }}_${{ github.sha }}", "BRANCH_REF" : "${{ github.ref_name }}"}'
